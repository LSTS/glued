#! /bin/bash
###########################################################################
# GLUED: GNU/Linux Uniform Environment Distribution                       #
# Copyright (C) 2007-2022 Universidade do Porto - Faculdade de Engenharia #
# Laboratório de Sistemas e Tecnologia Subaquática (LSTS)                 #
###########################################################################
# This program is free software; you can redistribute it and/or modify    #
# it under the terms of the GNU General Public License as published by    #
# the Free Software Foundation; either version 2 of the License, or (at   #
# your option) any later version.                                         #
#                                                                         #
# This program is distributed in the hope that it will be useful, but     #
# WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU       #
# General Public License for more details.                                #
#                                                                         #
# You should have received a copy of the GNU General Public License       #
# along with this program; if not, write to the Free Software             #
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA           #
# 02110-1301 USA.                                                         #
###########################################################################
# Author: Pedro Gonçalves                                                 #
###########################################################################

# Global values
attemptsPings=5
pingIp="8.8.8.8"
networkUp=false
system=$cfg_sys_family
listFileUpdated=false
pathToSaveFile="/opt/LSTS/glued-apk/glued-apk-cache"
file="$pathToSaveFile/package-list.txt"
package=""
md5Sum=""
packagesNames=()
packageMd5=()
numberOfPackages=0
packageToInstallExist=false
unpackFileOk=false

# Config: GLUED-Cloud version.
cfg_glued_version='2022.03'

nfo1()
{
    echo -e "[$(date +"%Y-%m-%d %H:%M:%S")] \033[0m\033[1;34m* $*\033[0m"
}

item()
{
    echo -e "[$(date +"%Y-%m-%d %H:%M:%S")] \033[0m\033[0;33m  > $*"
}

ok()
{
    echo -e "[$(date +"%Y-%m-%d %H:%M:%S")] \033[0m\033[0;32m** $*\033[0m"
}

err()
{
    echo -e "[$(date +"%Y-%m-%d %H:%M:%S")] \033[0m\033[1;31mERROR: $*\033[0m"
}

function pingNetwork()
{
  networkUp=false
  count=1
  nfo1 "Checking Network Connection"
  while [ 1 ]
  do
    ping -c 1 $pingIp -W 1 &>/dev/null
    if [ $? -eq 0 ] ; then
      networkUp=true
      break
    fi

    if [ $count -eq $attemptsPings ] ; then
      break
    fi
    echo -n "."
    ((count++))
  done

  if [ $networkUp = true ] ; then
    ok "Network Available"
  else
    err "No Network Available"
  fi
}

function getListPackages()
{
  if [ -f "$file" ] ; then
    rm "$file"
  fi
  nfo1 "Getting List Packages for $system"
  urlPath="https://www.lsts.pt/glued/cloud/package/$system/gcc-5.4/package-list.txt"
  wget -P $pathToSaveFile $urlPath &>/dev/null
  if [ $? -ne 0 ] ; then
    listFileUpdated=false
  else
    listFileUpdated=true
  fi

  if [ $listFileUpdated = true ] ; then
    ok "List File of Packages Updated"
  else
    err "Fail Getting List of Packages"
  fi
}

function showListOfPackages()
{
  while IFS= read -r line
  do
    IFS='#'
    read -a strarr <<< "$line"
    item "${strarr[0]}\033[0m"
  done < "$file"
}

function readListOfPackages()
{
  numberOfPackages=0
  while IFS= read -r line
  do
    IFS='#'
    read -a strarr <<< "$line"
    packagesNames[$numberOfPackages]=${strarr[0]}
    packageMd5[$numberOfPackages]=${strarr[1]}
    ((numberOfPackages++))
  done < "$file"
}

function printHelp()
{
  echo -e "> Usage: glued-apk list                      (list all package available for $system)"
  echo -e "> Usage: glued-apk install [name-package]    (install package in $system)"
  echo -e "> Usage: glued-apk clean                     (delete all packages downloaded)"
}

function downloadPackage()
{
  fileToDownload="$pathToSaveFile/$package/$package.tar.gz"
  pathForUnpack="$pathToSaveFile/$package"
  if [ -f "$fileToDownload" ] ; then
    rm "$fileToDownload"
  fi
  fileDownload=false
  ok "Getting $package for $system"
  urlPathDownload="https://www.lsts.pt/glued/cloud/package/$system/gcc-5.4/$package.tar.gz"
  wget -P $pathForUnpack $urlPathDownload &>/dev/null
  if [ $? -ne 0 ] ; then
    fileDownload=false
  else
    fileDownload=true
  fi

  if [ $fileDownload = true ] ; then
    ok "Download of $package OK"
    unpackPackage
  else
    err "Download Fail for $package"
  fi
}

function unpackPackage()
{
  unpackFileOk=false
  nfo1 "Checking md5sum of $package download"
  result=$(md5sum $fileToDownload)
  IFS='  '
  read -a strarrd <<< "$result"
  if [ "$md5Sum" = "${strarrd[0]}" ] ; then
    ok "md5sum of $package OK"
    rm -rf ${pathForUnpack}/rootfs ${pathForUnpack}/toolchain &>/dev/null
    nfo1 "Unpacking $package"
    tar -xf ${fileToDownload} -C ${pathForUnpack} -p -h &>/dev/null
    if [ $? -ne 0 ] ; then
      unpackFileOk=false
    else
      unpackFileOk=true
  fi
  else
    err "Fail md5sum for $package downloaded"
  fi

  if [ $unpackFileOk = true ] ; then
    ok "Unpack Package $package OK"
  else
    err "Fail unpacking $package"
  fi
}

function copyToSystem()
{
  echo "copy to system"
}

function installPackage()
{
  echo -e -n "[$(date +"%Y-%m-%d %H:%M:%S")] \033[0m\033[1;34m* $*Update/Install \033[0m\033[0;33m$package\033[0m\033[1;34m on \033[0m\033[0;32m$system\033[0m"
  echo ""
  readListOfPackages
  packageToInstallExist=false
  count=0
  while [ 1 ]
  do
    if [ $count -eq $numberOfPackages ] ; then
      break
    else
      #echo -n ${packagesNames[$count]} ; echo " | ${packageMd5[$count]}"
      if [ "$package" = "${packagesNames[$count]}" ] ; then
        md5Sum=${packageMd5[$count]}
        packageToInstallExist=true
        break
      fi
    fi
    ((count++))
  done

  if [ $packageToInstallExist = true ] ; then
    downloadPackage
    if [ $unpackFileOk = true ] ; then
      copyToSystem
    fi
  else
    err "Package Not Found"
  fi
  
}

function cleanFolderDownload()
{
  sizeCache=$(du -sh $pathToSaveFile)
  nfo1 "Cache Deleted: ${sizeCache}"
  $(rm -rf $pathToSaveFile/* &>/dev/null)
}

# Main Run
echo "#####################################"
echo -n -e "#      \033[0m\033[1;33mGLUED-CLOUD\033[0m -> " ; echo -e "\033[0m\033[1;32m${cfg_glued_version}\033[0m       #"
echo "#####################################"
$(mkdir -p ${pathToSaveFile})
if [ $# -eq 0 ] ; then
  printHelp
else
  if [ "$1" = "list" ] ; then
    pingNetwork
    if [ $networkUp = true ] ; then
      getListPackages
      if [ $listFileUpdated = true ] ; then
        nfo1 "List of Packages for $system"
        showListOfPackages
      fi
    fi
  fi

  if [ "$1" = "help" ] ; then
    printHelp
  fi

  if [ "$1" = "install" ] ; then
    if [ $# -eq 2 ] ; then
      package=$2
      pingNetwork
      if [ $networkUp = true ] ; then
        getListPackages
        if [ $listFileUpdated = true ] ; then
          installPackage
        fi
      fi
    else
      printHelp
    fi
  fi

  if [ "$1" = "clean" ] ; then
    cleanFolderDownload
  fi
fi
